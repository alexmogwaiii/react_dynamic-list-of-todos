{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/Loader/Loader.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","title","filter","selectedId","handleChange","event","name","filterUser","props","setState","target","value","handleSelect","filterUserByCompleted","handleSelectUser","id","userId","selectUser","this","todos","shuffle","className","type","placeholder","onChange","onClick","map","todo","ClassNames","completed","key","React","Component","getUser","fetch","then","response","json","result","data","Loader","CurrentUser","selectedUser","isLoaded","handleError","startLoading","updateUser","prevProps","onClear","email","phone","PureComponent","App","allTodos","selectedUserId","clearUser","filterUserByField","field","includes","filterValue","shuffledTodos","i","length","j","Math","floor","random","temp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe02f4a5.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    title: '',\n    filter: '',\n    selectedId: '',\n  }\n\n  handleChange = (event, name) => {\n    const { filterUser } = this.props;\n\n    this.setState({ [name]: event.target.value });\n    filterUser(event.target.value, name);\n  }\n\n  handleSelect = (event) => {\n    const { filterUserByCompleted } = this.props;\n    const { value } = event.target;\n\n    this.setState({ filter: value });\n    filterUserByCompleted(value);\n  }\n\n  handleSelectUser = (id, userId) => {\n    this.props.selectUser(userId);\n    this.setState({ selectedId: id });\n  }\n\n  render() {\n    const { todos, shuffle } = this.props;\n    const { title, filter, selectedId } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__form\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={title}\n            placeholder=\"choose Todo Title\"\n            onChange={event => this.handleChange(event, 'title')}\n            className=\"TodoList__input input\"\n          />\n          <select\n            value={filter}\n            name=\"completed\"\n            onChange={this.handleSelect}\n            className=\"TodoList__select select\"\n          >\n            <option value=\"\">filter by status</option>\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n          <button\n            type=\"button\"\n            onClick={shuffle}\n            className=\"button button--randomize\"\n          >\n            randomize\n          </button>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                className={ClassNames('TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={ClassNames(\n                    'TodoList__user-button', 'button', {\n                      'TodoList__user-button--selected': todo.id === selectedId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => this.handleSelectUser(todo.id, todo.userId)}\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n      createdAt: PropTypes.string.isRequired,\n      updatedAt: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  filterUser: PropTypes.func.isRequired,\n  filterUserByCompleted: PropTypes.func.isRequired,\n  shuffle: PropTypes.func.isRequired,\n};\n","const TODO_URL = 'https://mate-api.herokuapp.com/todos';\nconst USERS_URL = 'https://mate-api.herokuapp.com/users';\n\nexport const getTodos = () => fetch(TODO_URL)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getUser = userId => fetch(`${USERS_URL}/${userId}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React from 'react';\n\nexport const Loader = () => (\n  <div className=\"loader\" />\n);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    selectedUser: {},\n    isLoaded: true,\n  }\n\n  async componentDidMount() {\n    this.startLoading();\n    try {\n      const selectedUser = await getUser(this.props.userId);\n\n      this.updateUser(selectedUser);\n    } catch (error) {\n      this.handleError();\n    }\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    this.startLoading();\n    try {\n      const selectedUser = await getUser(this.props.userId);\n\n      this.updateUser(selectedUser);\n    } catch (error) {\n      this.handleError();\n    }\n  }\n\n  handleError = () => {\n    this.setState({\n      isLoaded: true,\n      selectedUser: null,\n    });\n  }\n\n  startLoading = () => {\n    this.setState({\n      isLoaded: false,\n    });\n  }\n\n  updateUser = (userId) => {\n    this.setState({\n      selectedUser: userId,\n      isLoaded: true,\n    });\n  }\n\n  render() {\n    const { userId, onClear } = this.props;\n    const { isLoaded, selectedUser } = this.state;\n\n    if (!selectedUser) {\n      return (<p>User not found</p>);\n    }\n\n    return (\n      <>\n        {isLoaded ? (\n          <div className=\"CurrentUser\">\n            <div className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {userId}\n              </span>\n              <button\n                type=\"button\"\n                className=\"CurrentUser__clear\"\n                onClick={onClear}\n              >\n                Clear\n              </button>\n            </div>\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n          </div>\n        ) : <Loader />}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\n\nclass App extends React.Component {\n  state = {\n    allTodos: [],\n    todos: [],\n    selectedUserId: '',\n    isLoaded: false,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.filter(todo => todo.title !== '' && todo.userId !== null),\n      allTodos: todos.filter(todo => todo.title !== '' && todo.userId !== null),\n      isLoaded: true,\n    });\n  }\n\n  selectUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  filterUserByField = (value, field) => {\n    this.setState(state => ({\n      todos: [...state.allTodos].filter(todo => todo[field].includes(value)),\n    }));\n  }\n\n  filterUserByCompleted = (value) => {\n    if (value === 'all' || value === 'filter by status') {\n      this.setState(state => ({\n        todos: [...state.allTodos],\n      }));\n\n      return;\n    }\n\n    const filterValue = value === 'completed';\n\n    this.setState(state => ({\n      todos: [...state.allTodos].filter(todo => todo.completed === filterValue),\n    }));\n  }\n\n  shuffle = () => {\n    const { todos } = this.state;\n    const shuffledTodos = [...todos];\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = shuffledTodos.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = shuffledTodos[i];\n\n      shuffledTodos[i] = shuffledTodos[j];\n      shuffledTodos[j] = temp;\n    }\n\n    this.setState({ todos: shuffledTodos });\n  }\n\n  render() {\n    const { todos, selectedUserId, isLoaded } = this.state;\n\n    return (\n      <div className=\"App\">\n        {isLoaded ? (\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={todos}\n              selectUser={this.selectUser}\n              filterUser={this.filterUserByField}\n              filterUserByCompleted={this.filterUserByCompleted}\n              shuffle={this.shuffle}\n            />\n          </div>\n        ) : <Loader />\n        }\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId || 0}\n                onClear={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}