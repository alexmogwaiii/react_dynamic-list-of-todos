{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","selected","handleChange","event","value","target","setState","filterTodos","todos","filter","todo","title","toLowerCase","includes","displayBy","completed","handleSelect","this","props","selectUserId","checkHandler","preparedTodos","className","action","type","name","placeholder","onChange","map","classnames","checked","key","id","readOnly","onClick","userId","React","Component","request","url","a","fetch","response","ok","Error","status","statusText","json","getTodos","data","getUser","CurrentUser","user","updateUser","prevProps","email","phone","clearUser","App","selectedUserId","clearUserId","ReactDOM","render","document","getElementById"],"mappings":"8XAMaA,G,MAAb,4MACEC,MAAQ,CACNC,MAAO,GACPC,SAAU,OAHd,EAMEC,aAAe,SAACC,GAAW,IACjBC,EAAUD,EAAME,OAAhBD,MAER,EAAKE,SAAS,CAAEN,MAAOI,KAT3B,EAYEG,YAAc,SAACC,EAAOR,GACpB,OAAKA,EAIEQ,EAAMC,QAAO,SAACC,GAAU,IACrBC,EAAUD,EAAVC,MAER,QAAuB,kBAAXA,IACPA,EAAMC,cAAcC,SAASb,EAAMY,mBAPjCJ,GAdb,EA6BEM,UAAY,SAACN,EAAOP,GAClB,OAAQA,GACN,IAAK,SACH,OAAOO,EAAMC,QAAO,SAAAC,GAAI,OAAKA,EAAKK,aACpC,IAAK,YACH,OAAOP,EAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKK,aACnC,QACE,OAAOP,IApCf,EAwCEQ,aAAe,SAACb,GAAW,IACjBC,EAAUD,EAAME,OAAhBD,MAER,EAAKE,SAAS,CAAEL,SAAUG,KA3C9B,uDA8CY,IAAD,EACuCa,KAAKC,MAA3CV,EADD,EACCA,MAAOW,EADR,EACQA,aAAcC,EADtB,EACsBA,aADtB,EAEqBH,KAAKlB,MAAzBC,EAFD,EAECA,MAAOC,EAFR,EAEQA,SAEXoB,EAAgBJ,KAAKV,YAAYC,EAAOR,GAI5C,OAFAqB,EAAgBJ,KAAKH,UAAUO,EAAepB,GAG5C,yBAAKqB,UAAU,YACb,sCAEA,yBAAKA,UAAU,4BACb,0BACEC,OAAO,IACPD,UAAU,kBAEV,2BACEE,KAAK,OACLC,KAAK,QACLH,UAAU,kBACVI,YAAY,qCACZtB,MAAOJ,EACP2B,SAAUV,KAAKf,eAGjB,4BACEoB,UAAU,mBACVG,KAAK,SACLrB,MAAOH,EACP0B,SAAUV,KAAKD,cAEf,4BAAQZ,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,aAAd,eAGJ,wBAAIkB,UAAU,kBACXD,EAAcO,KAAI,SAAAlB,GAAI,OACrB,wBACEY,UAAWO,IAAW,iBAAkB,CACtC,6BAA8BnB,EAAKK,UACnC,2BAA4BL,EAAKoB,UAEnCC,IAAKrB,EAAKsB,IAEV,+BACE,2BACER,KAAK,WACLS,UAAQ,EACRH,QAASpB,EAAKK,UACdY,SAAU,WACRP,EAAaV,EAAKsB,OAGtB,2BACGtB,EAAKC,QAIV,4BACEW,UAAU,iEAKVE,KAAK,SACLU,QAAS,WACPf,EAAaT,EAAKyB,UARtB,OAYG,KACAzB,EAAKyB,mBAvHxB,GAA8BC,IAAMC,YCF9BC,EAAO,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACSC,MAAM,GAAD,OALb,kCAKa,OAAeF,IAD7B,WACRG,EADQ,QAGAC,GAHA,sBAIN,IAAIC,MAAJ,UACDF,EAASG,OADR,cACoBH,EAASI,aALvB,gCASPJ,EAASK,QATF,2CAAH,sDAYAC,EAAQ,uCAAG,4BAAAR,EAAA,sEACFF,EAfL,UAcO,cAChB9B,EADgB,yBAGfA,EAAMyC,MAHS,2CAAH,qDAMRC,EAAO,uCAAG,WAAMf,GAAN,iBAAAK,EAAA,6DACfD,EADe,UArBP,WAqBO,OACIJ,GADJ,SAEDG,EAAQC,GAFP,cAEf/B,EAFe,yBAIdA,EAAMyC,MAJQ,2CAAH,sDCfPE,G,MAAb,4MACEpD,MAAQ,CACNqD,KAAM,MAFV,kEAMInC,KAAKoC,eANT,yCASqBC,GACbA,EAAUnB,SAAWlB,KAAKC,MAAMiB,QAClClB,KAAKoC,eAXX,4JAgBYlB,EAAWlB,KAAKC,MAAhBiB,OAhBZ,SAiBuBe,EAAQf,GAjB/B,OAiBUiB,EAjBV,OAmBInC,KAAKX,SAAS,CAAE8C,SAnBpB,qIAsBY,IACAA,EAASnC,KAAKlB,MAAdqD,KAER,OAAKA,EASH,yBAAK9B,UAAU,eACb,wBAAIA,UAAU,sBACZ,4CAEG,IACA8B,EAAKpB,KAIV,wBAAIV,UAAU,qBACX8B,EAAK3B,MAER,uBAAGH,UAAU,sBACV8B,EAAKG,OAER,uBAAGjC,UAAU,sBACV8B,EAAKI,OAER,yBAAKlC,UAAU,yBACb,4BACEA,UAAU,kCACVY,QAASjB,KAAKC,MAAMuC,UACpBjC,KAAK,UAHP,WA1BF,yBAAKF,UAAU,wBACb,uBAAGA,UAAU,kDA5BvB,GAAiCc,IAAMC,YC8DxBqB,G,8NA1Db3D,MAAQ,CACNS,MAAO,GACPmD,eAAgB,G,EASlBxC,aAAe,SAACa,GACd,EAAK1B,SAAS,CAAEqD,eAAgB3B,K,EAGlC4B,YAAc,WACZ,EAAKtD,SAAS,CAAEqD,eAAgB,K,EAGlCvC,aAAe,SAACY,GACd,EAAK1B,UAAS,SAAAP,GAAK,MAAK,CACtBS,MAAOT,EAAMS,MAAMoB,KAAI,SAAAlB,GAAI,OACzBA,EAAKsB,KAAOA,EAAZ,2BAEOtB,GAFP,IAGIK,WAAYL,EAAKK,YACfL,U,kMApBUsC,I,OAAdxC,E,OAENS,KAAKX,SAAS,CAAEE,U,qIAsBR,IAAD,EAC2BS,KAAKlB,MAA/BS,EADD,EACCA,MAAOmD,EADR,EACQA,eAEf,OACE,yBAAKrC,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEd,MAAOA,EACPW,aAAcF,KAAKE,aACnBC,aAAcH,KAAKG,gBAIvB,yBAAKE,UAAU,gBACb,yBAAKA,UAAU,0BACZqC,EACC,kBAAC,EAAD,CACExB,OAAQwB,EACRF,UAAWxC,KAAK2C,cAEhB,0B,GAnDExB,IAAMC,YCNxBwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.c4a5ec50.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\n\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selected: 'all',\n  }\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({ query: value });\n  }\n\n  filterTodos = (todos, query) => {\n    if (!query) {\n      return todos;\n    }\n\n    return todos.filter((todo) => {\n      const { title } = todo;\n\n      if (typeof (title) === 'string'\n        && title.toLowerCase().includes(query.toLowerCase())) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  displayBy = (todos, selected) => {\n    switch (selected) {\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  }\n\n  handleSelect = (event) => {\n    const { value } = event.target;\n\n    this.setState({ selected: value });\n  }\n\n  render() {\n    const { todos, selectUserId, checkHandler } = this.props;\n    const { query, selected } = this.state;\n\n    let preparedTodos = this.filterTodos(todos, query);\n\n    preparedTodos = this.displayBy(preparedTodos, selected);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <form\n            action=\"/\"\n            className=\"TodoList__form\"\n          >\n            <input\n              type=\"text\"\n              name=\"title\"\n              className=\"TodoList__input\"\n              placeholder=\"enter title here to find something\"\n              value={query}\n              onChange={this.handleChange}\n            />\n\n            <select\n              className=\"TodoList__select\"\n              name=\"select\"\n              value={selected}\n              onChange={this.handleSelect}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </form>\n          <ul className=\"TodoList__list\">\n            {preparedTodos.map(todo => (\n              <li\n                className={classnames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': !todo.checked,\n                })}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                    onChange={() => {\n                      checkHandler(todo.id);\n                    }}\n                  />\n                  <p>\n                    {todo.title}\n                  </p>\n                </label>\n\n                <button\n                  className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUserId(todo.userId);\n                  }}\n                >\n                  User\n                  {' #'}\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    userId: PropTypes.number,\n  })).isRequired,\n  selectUserId: PropTypes.func.isRequired,\n  checkHandler: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\nconst userUrl = '/users/';\nconst todosUrl = '/todos';\n\nconst request = async(url) => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    throw new Error(\n      `${response.status} - ${response.statusText}`,\n    );\n  }\n\n  return response.json();\n};\n\nexport const getTodos = async() => {\n  const todos = await request(todosUrl);\n\n  return todos.data;\n};\n\nexport const getUser = async(userId) => {\n  const url = `${userUrl}${userId}`;\n  const todos = await request(url);\n\n  return todos.data;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getUser } from '../../api/api';\n\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.updateUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.updateUser();\n    }\n  }\n\n  async updateUser() {\n    const { userId } = this.props;\n    const user = await getUser(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <div className=\"CurrentUser__loading\">\n          <i className=\"fas fa-spinner fa-spin CurrentUser__spin\" />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Select user\n            {' '}\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n        <div className=\"CurrentUser__btn-wrap\">\n          <button\n            className=\"fas fa-recycle CurrentUser__btn\"\n            onClick={this.props.clearUser}\n            type=\"button\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport './styles/general.scss';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUserId = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clearUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  checkHandler = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo,\n            completed: !todo.completed,\n          } : todo)),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUserId={this.selectUserId}\n            checkHandler={this.checkHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}