{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/Loader/Loader.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","title","filter","selectedTodoId","handleChange","event","name","filterUser","props","setState","target","value","handleSelect","filterTodosByStatus","handleSelectUser","todoId","userId","selectUser","this","todos","shuffle","className","type","placeholder","onChange","disabled","onClick","map","todo","ClassNames","completed","key","id","React","Component","getUser","fetch","then","response","json","result","data","Loader","CurrentUser","selectedUser","isLoaded","handleError","startLoading","updateUser","prevProps","onClear","email","phone","PureComponent","App","allTodos","selectedUserId","clearUser","filterTodosByTitle","field","includes","shuffledTodos","i","length","j","Math","floor","random","temp","validTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d47378e.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    title: '',\n    filter: '',\n    selectedTodoId: '',\n  }\n\n  handleChange = (event, name) => {\n    const { filterUser } = this.props;\n\n    this.setState({ [name]: event.target.value });\n    filterUser(event.target.value, name);\n  }\n\n  handleSelect = (event) => {\n    const { filterTodosByStatus } = this.props;\n    const { value } = event.target;\n\n    this.setState({ filter: value });\n    filterTodosByStatus(value);\n  }\n\n  handleSelectUser = (todoId, userId) => {\n    this.props.selectUser(userId);\n    this.setState({ selectedTodoId: todoId });\n  }\n\n  render() {\n    const { todos, shuffle } = this.props;\n    const { title, filter, selectedTodoId } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__form\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={title}\n            placeholder=\"choose Todo Title\"\n            onChange={event => this.handleChange(event, 'title')}\n            className=\"TodoList__input input\"\n          />\n          <select\n            value={filter}\n            name=\"status\"\n            onChange={this.handleSelect}\n            className=\"TodoList__select select\"\n          >\n            <option value=\"\" disabled>filter by status</option>\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n          <button\n            type=\"button\"\n            onClick={shuffle}\n            className=\"button button--randomize\"\n          >\n            randomize\n          </button>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                className={ClassNames('TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={ClassNames(\n                    'TodoList__button', 'button', {\n                      'TodoList__button--selected': todo.id === selectedTodoId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => this.handleSelectUser(todo.id, todo.userId)}\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n      createdAt: PropTypes.string.isRequired,\n      updatedAt: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  filterUser: PropTypes.func.isRequired,\n  filterTodosByStatus: PropTypes.func.isRequired,\n  shuffle: PropTypes.func.isRequired,\n};\n","const TODO_URL = 'https://mate-api.herokuapp.com/todos';\nconst USERS_URL = 'https://mate-api.herokuapp.com/users';\n\nexport const getTodos = () => fetch(TODO_URL)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getUser = userId => fetch(`${USERS_URL}/${userId}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React from 'react';\n\nexport const Loader = () => (\n  <div className=\"loader\" />\n);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    selectedUser: {},\n    isLoaded: true,\n  }\n\n  async componentDidMount() {\n    this.startLoading();\n    try {\n      const selectedUser = await getUser(this.props.userId);\n\n      this.updateUser(selectedUser);\n    } catch (error) {\n      this.handleError();\n    }\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    this.startLoading();\n    try {\n      const selectedUser = await getUser(this.props.userId);\n\n      this.updateUser(selectedUser);\n    } catch (error) {\n      this.handleError();\n    }\n  }\n\n  handleError = () => {\n    this.setState({\n      isLoaded: true,\n      selectedUser: null,\n    });\n  }\n\n  startLoading = () => {\n    this.setState({\n      isLoaded: false,\n    });\n  }\n\n  updateUser = (userId) => {\n    this.setState({\n      selectedUser: userId,\n      isLoaded: true,\n    });\n  }\n\n  render() {\n    const { userId, onClear } = this.props;\n    const { isLoaded, selectedUser } = this.state;\n\n    if (!selectedUser) {\n      return (<p>User not found</p>);\n    }\n\n    return (\n      <>\n        {isLoaded ? (\n          <div className=\"CurrentUser\">\n            <div className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {userId}\n              </span>\n              <button\n                type=\"button\"\n                className=\"CurrentUser__clear\"\n                onClick={onClear}\n              >\n                Clear\n              </button>\n            </div>\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n          </div>\n        ) : <Loader />}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\n\nclass App extends React.Component {\n  state = {\n    allTodos: [],\n    todos: [],\n    selectedUserId: '',\n    isLoaded: false,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    const validTodos = todos.filter(todo => todo.title && todo.userId);\n\n    this.setState({\n      todos: validTodos,\n      allTodos: validTodos,\n      isLoaded: true,\n    });\n  }\n\n  selectUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  filterTodosByTitle = (value, field) => {\n    this.setState(state => ({\n      todos: state.allTodos.filter(todo => todo[field].includes(value)),\n    }));\n  }\n\n  filterTodosByStatus = (value) => {\n    switch (value) {\n      case 'all':\n        this.setState(state => ({\n          todos: [...state.allTodos],\n        }));\n        break;\n      case 'completed':\n        this.setState(state => ({\n          todos: state.allTodos.filter(todo => todo.completed),\n        }));\n        break;\n      case 'active':\n        this.setState(state => ({\n          todos: state.allTodos.filter(todo => !todo.completed),\n        }));\n        break;\n      default:\n        break;\n    }\n  }\n\n  shuffle = () => {\n    const { todos } = this.state;\n    const shuffledTodos = [...todos];\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = shuffledTodos.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = shuffledTodos[i];\n\n      shuffledTodos[i] = shuffledTodos[j];\n      shuffledTodos[j] = temp;\n    }\n\n    this.setState({ todos: shuffledTodos });\n  }\n\n  render() {\n    const { todos, selectedUserId, isLoaded } = this.state;\n\n    return (\n      <div className=\"App\">\n        {isLoaded ? (\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={todos}\n              selectUser={this.selectUser}\n              filterUser={this.filterTodosByTitle}\n              filterTodosByStatus={this.filterTodosByStatus}\n              shuffle={this.shuffle}\n            />\n          </div>\n        ) : <Loader />\n        }\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId || 0}\n                onClear={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}